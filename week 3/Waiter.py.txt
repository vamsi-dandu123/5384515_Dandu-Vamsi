import math
import os
import random
import re
import sys

def generate_primes(n):
    primes = []
    num = 2
    while len(primes) < n:
        for p in primes:
            if num % p == 0:
                break
        else:
            primes.append(num)
        num += 1
    return primes

#
# Complete the 'waiter' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER_ARRAY number
#  2. INTEGER q
#

def waiter(number, q):
    # Write your code here
    primes = generate_primes(q) 
    answers = []
    stack = number[:]
    
    for i in range(q):
        A =[]
        B=[]
        prime = primes[i]
        
        
        while stack:
            plate = stack.pop()
            if plate % prime == 0:
                A.append(plate)
            else:
                B.append(plate)
                
        answers.extend(reversed(A))
        
        stack = B
    answers.extend(reversed(stack))
    
    return answers
    

if _name_ == '_main_':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    q = int(first_multiple_input[1])

    number = list(map(int, input().rstrip().split()))

    result = waiter(number, q)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()